{
  "stats": {
    "suites": 7,
    "tests": 43,
    "passes": 43,
    "pending": 0,
    "failures": 0,
    "start": "2018-12-17T13:02:02.416Z",
    "end": "2018-12-17T13:02:04.723Z",
    "duration": 2307,
    "testsRegistered": 43,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "25c43342-089b-4d76-bdf1-28491dfac7fd",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "c82240f6-aa77-4e7a-9616-bb8260ed5da8",
        "title": "Color Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/color.test.ts",
        "file": "/test/color.test.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "new Color(\"string\") should conver hex string to color object",
            "fullTitle": "Color Test new Color(\"string\") should conver hex string to color object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(0, 0, 0, \"FFFFFF\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 255,\n    color: \"FFFFFF\",\n    green: 255,\n    red: 255,\n});",
            "err": {},
            "isRoot": false,
            "uuid": "dde0cbd5-beb4-42cf-ab74-44872b54c03e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(123, 44, 55) should give the color number : 0x7B2C37",
            "fullTitle": "Color Test new Color(123, 44, 55) should give the color number : 0x7B2C37",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(123, 44, 55);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0x7B2C37);",
            "err": {},
            "isRoot": false,
            "uuid": "78532fa0-3c9a-4b2c-b652-389d3fd747dc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(255, 255, 255) should give the color number : 0xFFFFFF",
            "fullTitle": "Color Test new Color(255, 255, 255) should give the color number : 0xFFFFFF",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(255, 255, 255);\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(0xFFFFFF);",
            "err": {},
            "isRoot": false,
            "uuid": "610387f3-fa89-48e4-a3cb-4381a1dd296f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
            "fullTitle": "Color Test new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(0, 0, 0, \"1ac3ef\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 239,\n    color: \"1AC3EF\",\n    green: 195,\n    red: 26,\n});",
            "err": {},
            "isRoot": false,
            "uuid": "f996a37c-a7f3-4868-8767-5e3302578c75",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "dde0cbd5-beb4-42cf-ab74-44872b54c03e",
          "78532fa0-3c9a-4b2c-b652-389d3fd747dc",
          "610387f3-fa89-48e4-a3cb-4381a1dd296f",
          "f996a37c-a7f3-4868-8767-5e3302578c75"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "8230eb42-7ac4-4f17-8041-2ba04a3e73d6",
        "title": "Discover Class Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/discover.test.ts",
        "file": "/test/discover.test.ts",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Discover Class Test \"before each\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
            "err": {},
            "isRoot": false,
            "uuid": "54f8b340-d120-40a8-a260-41b5e86ed6b9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Discover Class Test \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6a88d976-cd4c-43de-8664-7ec6136e830b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "discover() should find bulbs",
            "fullTitle": "Discover Class Test discover() should find bulbs",
            "timedOut": false,
            "duration": 206,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return __awaiter(_this, void 0, void 0, function () {\n        var discover, devices;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    discover = new discover_1.Discover({\n                        limit: 1,\n                        timeout: 1000,\n                    });\n                    setTimeout(function () {\n                        // Mock message received:\n                        var message = \"HTTP/1.1 200 OK\\r\\n\\\nCache-Control: max-age=3584\\r\\n\\\nDate:\\r\\n\\\nExt:\\r\\n\\\nLocation: yeelight://192.168.0.42:55443\\r\\n\\\nServer: POSIX UPnP/1.0 YGLC/1\\r\\n\\\nid: 0x000000000af2608f\\r\\n\\\nmodel: color\\r\\n\\\nfw_ver: 26\\r\\n\\\nsupport: get_prop set_default set_power toggle set_bright start_cf \\r\\n\\\nstop_cf set_scene cron_add cron_get cron_del set_ct_abx set_rgb set_hsv \\r\\n\\\nset_adjust adjust_bright adjust_ct adjust_color set_music set\\r\\n\\\npower: on\\r\\n\\\nbright: 1\\r\\n\\\ncolor_mode: 1\\r\\n\\\nct: 2234\\r\\n\\\nrgb: 65280\\r\\n\\\nhue: 240\\r\\n\\\nsat: 100\\r\\n\\\nname: new_name\";\n                        // @ts-ignore private\n                        discover.onSocketMessage(Buffer.from(message), {\n                            address: \"192.168.0.42\",\n                            family: \"IPv4\",\n                            port: 49155,\n                        });\n                    }, 100);\n                    return [4 /*yield*/, discover.start()];\n                case 1:\n                    devices = _a.sent();\n                    chai_1.expect(devices.length).to.eq(1);\n                    chai_1.expect(devices[0].id).to.eq(\"0x000000000af2608f\");\n                    chai_1.expect(devices[0].host).to.eq(\"192.168.0.42\");\n                    chai_1.expect(devices[0].port).to.eq(55443);\n                    discover.destroy();\n                    return [2 /*return*/];\n            }\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "86a56183-4683-4933-97b9-832251596123",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "86a56183-4683-4933-97b9-832251596123"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 206,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "fe32fcd3-7bbd-4adc-ac3e-9f91bf868a36",
        "title": "Util Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/util.test.ts",
        "file": "/test/util.test.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "parseDeviceInfo() should successful parse valid message",
            "fullTitle": "Util Test parseDeviceInfo() should successful parse valid message",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var message = fs.readFileSync(path.join(__dirname, \"./data/valid-message.txt\"), \"utf8\");\nvar device = utils_1.Utils.parseDeviceInfo(message);\nvar outputExpected = require(\"./data/valid-device.json\");\nchai_1.expect(device).not.eq(null);\nchai_1.expect(device).deep.eq(outputExpected);",
            "err": {},
            "isRoot": false,
            "uuid": "2f0b5aaa-fbcd-465b-a763-8cd716aba15d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "getListIpAddress should get the arround ip address first",
            "fullTitle": "Util Test getListIpAddress should get the arround ip address first",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ip = \"192.168.1.5\";\nvar output = utils_1.Utils.getListIpAddress(ip, 1, 10);\nchai_1.expect(output).to.deep.eq([\n    \"192.168.1.4\",\n    \"192.168.1.6\",\n    \"192.168.1.3\",\n    \"192.168.1.7\",\n    \"192.168.1.2\",\n    \"192.168.1.8\",\n    \"192.168.1.1\",\n    \"192.168.1.9\",\n    \"192.168.1.10\",\n]);",
            "err": {},
            "isRoot": false,
            "uuid": "5eaad396-30b6-491f-9519-f10561594941",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "1b84c3b5-ca11-4511-9b53-eb04293ed259",
            "title": "hexToNumber() test",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/util.test.ts",
            "file": "/test/util.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "numberToHex(1) should equal to 1",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1) should equal to 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "60d448f9-93b0-4f8c-bc96-af8bd2b60dbf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(10) should equal to 16",
                "fullTitle": "Util Test hexToNumber() test numberToHex(10) should equal to 16",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "8e812329-c236-48db-9f40-180edcc458cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(14) should equal to 20",
                "fullTitle": "Util Test hexToNumber() test numberToHex(14) should equal to 20",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "855af816-651d-48ae-bfdb-c881a91fa72c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(44) should equal to 68",
                "fullTitle": "Util Test hexToNumber() test numberToHex(44) should equal to 68",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "84e5f2db-a7b8-403d-b81c-837866bb7609",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(A) should equal to 10",
                "fullTitle": "Util Test hexToNumber() test numberToHex(A) should equal to 10",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "f727103d-3ec0-4d57-a13e-f7d164464957",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(F) should equal to 15",
                "fullTitle": "Util Test hexToNumber() test numberToHex(F) should equal to 15",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "c0b4e996-53c2-4728-a1bc-bd5241992032",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(1A) should equal to 26",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1A) should equal to 26",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "a0c9690b-874a-4be5-b225-7a8a4fd6fd5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(FF) should equal to 255",
                "fullTitle": "Util Test hexToNumber() test numberToHex(FF) should equal to 255",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "aa15b53b-5740-4c7a-9a0c-467d9073a0c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(AB) should equal to 171",
                "fullTitle": "Util Test hexToNumber() test numberToHex(AB) should equal to 171",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "c073b093-3ddb-4ca1-bf46-913a16569fc4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(A123BE) should equal to 10560446",
                "fullTitle": "Util Test hexToNumber() test numberToHex(A123BE) should equal to 10560446",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "eb4460ee-e25c-4743-9060-cf9e5725f646",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "670404a0-a2c9-49e3-9f52-d92e6709b638",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(ABCFED) should equal to 11259885",
                "fullTitle": "Util Test hexToNumber() test numberToHex(ABCFED) should equal to 11259885",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "cd3f21d1-db15-4164-825e-92c31ddb016f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(abccde) should equal to 11259102",
                "fullTitle": "Util Test hexToNumber() test numberToHex(abccde) should equal to 11259102",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "41e4b168-df12-476e-b7e9-b0e352ee6cbb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "60d448f9-93b0-4f8c-bc96-af8bd2b60dbf",
              "8e812329-c236-48db-9f40-180edcc458cb",
              "855af816-651d-48ae-bfdb-c881a91fa72c",
              "84e5f2db-a7b8-403d-b81c-837866bb7609",
              "f727103d-3ec0-4d57-a13e-f7d164464957",
              "c0b4e996-53c2-4728-a1bc-bd5241992032",
              "a0c9690b-874a-4be5-b225-7a8a4fd6fd5e",
              "aa15b53b-5740-4c7a-9a0c-467d9073a0c0",
              "c073b093-3ddb-4ca1-bf46-913a16569fc4",
              "eb4460ee-e25c-4743-9060-cf9e5725f646",
              "670404a0-a2c9-49e3-9f52-d92e6709b638",
              "cd3f21d1-db15-4164-825e-92c31ddb016f",
              "41e4b168-df12-476e-b7e9-b0e352ee6cbb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [
          "2f0b5aaa-fbcd-465b-a763-8cd716aba15d",
          "5eaad396-30b6-491f-9519-f10561594941"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "1b0ed45b-ccdc-4af3-a8ca-80b51d9b9c71",
        "title": "Yeelight Class Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
        "file": "/test/yeelight.test.ts",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Yeelight Class Test \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    socket.on(\"data\", function (incomming) {\n        validateFunc(JSON.parse(incomming.toString()));\n        if (data) {\n            socket.write(JSON.stringify(data));\n        }\n    });\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\n// console.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
            "err": {},
            "isRoot": false,
            "uuid": "2d8d287f-0247-43fc-a099-42ee6ae55e24",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Yeelight Class Test \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
            "err": {},
            "isRoot": false,
            "uuid": "26e812fe-3224-46e2-a75b-6eb6c14bf1e7",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "connect() should success",
            "fullTitle": "Yeelight Class Test connect() should success",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return __awaiter(_this, void 0, void 0, function () {\n        var yeelight, y;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    yeelight = new yeelight_1.Yeelight(options);\n                    return [4 /*yield*/, yeelight.connect()];\n                case 1:\n                    y = _a.sent();\n                    chai_1.expect(y).not.eq(null);\n                    chai_1.expect(y.connected).to.eq(true);\n                    y.disconnect();\n                    return [2 /*return*/];\n            }\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "8e74c96e-41db-4968-9c5c-b5c45f917ad4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "6a33f27c-f110-4bde-8a08-7be8e87a0519",
            "title": "setName() tests",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
            "file": "/test/yeelight.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "setName() should work when send valid message",
                "fullTitle": "Yeelight Class Test setName() tests setName() should work when send valid message",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options.lightPort = test_util_1.TestUtils.port;\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(result).to.not.eq(null);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "0c694767-c1bd-4c70-a43c-01efe629af27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should fire commandSuccess, set_name, set_name_sent event",
                "fullTitle": "Yeelight Class Test setName() tests setName() should fire commandSuccess, set_name, set_name_sent event",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy1, spy2, spy3, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"unit_test\"]),\n                            result: { id: 1, result: [\"ok\"] },\n                            success: true,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandSuccess\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(__assign({}, result)).to.deep.equal(expectData);\n                        sinon_1.assert.calledWith(spy1, expectData);\n                        sinon_1.assert.calledWith(spy2, expectData);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "df6da8f7-5964-4d30-8624-5e46fff5ffb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                "fullTitle": "Yeelight Class Test setName() tests setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData1, spy1, spy2, spy3, result, errResult, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData1 = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"this is invalid name\"]),\n                            result: { id: 1, error: { code: -1, message: \"General error\" } },\n                            success: false,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandError\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, error: { code: -1, message: \"General error\" } }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"this is invalid name\"],\n                            });\n                        });\n                        result = null;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"this is invalid name\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        errResult = error_1;\n                        return [3 /*break*/, 5];\n                    case 5:\n                        chai_1.expect(result).to.be.equal(null);\n                        chai_1.expect(__assign({}, errResult)).to.deep.equal(expectData1);\n                        sinon_1.assert.calledWith(spy1, expectData1);\n                        sinon_1.assert.calledWith(spy2, expectData1);\n                        sinon_1.assert.calledWith(spy3, expectData1.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "8817a630-7ed4-446c-b1be-ab63ca3fbfab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should reject promise, raise commandTimedout event when socket not response",
                "fullTitle": "Yeelight Class Test setName() tests setName() should reject promise, raise commandTimedout event when socket not response",
                "timedOut": false,
                "duration": 2003,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy2, spy3, result, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        yeelight.disablePing = true;\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"mybulb\"]),\n                            success: false,\n                        };\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"commandTimedout\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket(null, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"mybulb\"],\n                            });\n                        });\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"mybulb\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        sinon_1.assert.calledWith(spy2, expectData.command);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "c7921041-6510-4912-a40a-afdc0bcc69bd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0c694767-c1bd-4c70-a43c-01efe629af27",
              "df6da8f7-5964-4d30-8624-5e46fff5ffb9",
              "8817a630-7ed4-446c-b1be-ab63ca3fbfab",
              "c7921041-6510-4912-a40a-afdc0bcc69bd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2013,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "8b135bec-e7a1-4fa0-87b3-3b3141dd8a6d",
            "title": "manipulator methods",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
            "file": "/test/yeelight.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "method toggle should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method toggle should work when send valid message",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "1aa1f540-2e32-49e8-9f1c-7596a93a799f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method cronAdd should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method cronAdd should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "9b1dfbcc-a595-42c7-bda2-2d5b10f8bdb6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method cronGet should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method cronGet should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "7f4b6937-d2f3-48bf-8b34-fd41bbf0aecc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method cronDelete should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method cronDelete should work when send valid message",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "25a8183a-e5d4-407c-8861-c453e8a48bff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setDefault should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setDefault should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "7bd6ab80-a479-4ace-a9f5-128219a7704b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method startColorFlow should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method startColorFlow should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "8694b3e7-327f-42cf-9cd6-936896edd216",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method stopColorFlow should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method stopColorFlow should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "ea9c66a1-a550-4032-a385-ec8e6f7e4a06",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method getProperty should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method getProperty should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "7f46004e-445f-4ff7-8161-cd703f792d93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setCtAbx should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setCtAbx should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "0563ff3d-8090-4223-9d24-75badeeb2d97",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setRGB should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setRGB should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "f8572837-28e8-49ed-8833-227a6babbf3f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setHSV should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setHSV should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "901bca20-bba2-4bf6-92a4-bba713b5a7df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setBright should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setBright should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "a56870b2-61c1-4876-813c-21dabe0805fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setAdjust should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setAdjust should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "0491777f-6a94-4543-81e9-0d9b781490e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setName should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setName should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "782c6c56-b83b-4e24-a4e4-a2584d4e45f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method adjust should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method adjust should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "bdea7c29-367a-49cd-91fa-18f4594b040a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method ping should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method ping should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "6ee472ca-af38-4fde-997c-a8520b0321a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setScene should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setScene should work when send valid message",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "82275e34-a592-48d3-9bb6-396c899db7ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "method setMusic should work when send valid message",
                "fullTitle": "Yeelight Class Test manipulator methods method setMusic should work when send valid message",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n                var yeelight, result, reply;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, init()];\n                        case 1:\n                            yeelight = _a.sent();\n                            test_util_1.TestUtils.mockSocket(replyData.result, function (x) {\n                                chai_1.expect(x).to.deep.eq(sendData);\n                            });\n                            return [4 /*yield*/, fcn(yeelight)];\n                        case 2:\n                            result = _a.sent();\n                            reply = (verifyReply === undefined ?\n                                replyData :\n                                verifyReply);\n                            if (result) {\n                                result = removeClasses(result);\n                            }\n                            chai_1.expect(result).to.deep.eq(reply);\n                            yeelight.disconnect();\n                            return [2 /*return*/];\n                    }\n                });\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "b9f3d2ad-85fe-464d-8a27-48d909698a52",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1aa1f540-2e32-49e8-9f1c-7596a93a799f",
              "9b1dfbcc-a595-42c7-bda2-2d5b10f8bdb6",
              "7f4b6937-d2f3-48bf-8b34-fd41bbf0aecc",
              "25a8183a-e5d4-407c-8861-c453e8a48bff",
              "7bd6ab80-a479-4ace-a9f5-128219a7704b",
              "8694b3e7-327f-42cf-9cd6-936896edd216",
              "ea9c66a1-a550-4032-a385-ec8e6f7e4a06",
              "7f46004e-445f-4ff7-8161-cd703f792d93",
              "0563ff3d-8090-4223-9d24-75badeeb2d97",
              "f8572837-28e8-49ed-8833-227a6babbf3f",
              "901bca20-bba2-4bf6-92a4-bba713b5a7df",
              "a56870b2-61c1-4876-813c-21dabe0805fc",
              "0491777f-6a94-4543-81e9-0d9b781490e6",
              "782c6c56-b83b-4e24-a4e4-a2584d4e45f3",
              "bdea7c29-367a-49cd-91fa-18f4594b040a",
              "6ee472ca-af38-4fde-997c-a8520b0321a8",
              "82275e34-a592-48d3-9bb6-396c899db7ae",
              "b9f3d2ad-85fe-464d-8a27-48d909698a52"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 19,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [
          "8e74c96e-41db-4968-9c5c-b5c45f917ad4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 12,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2018
}