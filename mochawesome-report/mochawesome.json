{
  "stats": {
    "suites": 5,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-13T10:25:11.674Z",
    "end": "2018-10-13T10:25:15.835Z",
    "duration": 4161,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e811142b-3f2c-44ea-ae70-a9c05be0bc87",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e0ed1571-67ed-408b-9c24-2622395a4ec5",
        "title": "Color Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/color.test.ts",
        "file": "/test/color.test.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "new Color(\"string\") should conver hex string to color object",
            "fullTitle": "Color Test new Color(\"string\") should conver hex string to color object",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(0, 0, 0, \"FFFFFF\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 255,\n    color: \"FFFFFF\",\n    green: 255,\n    red: 255,\n});",
            "err": {},
            "isRoot": false,
            "uuid": "1ce7a502-f15f-46e2-b33e-ca1b7baadf82",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(123, 44, 55) should give the color number : 16776960",
            "fullTitle": "Color Test new Color(123, 44, 55) should give the color number : 16776960",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(0, 0, 0, \"FFFFFF\");\nvar numberValue = color.getValue();\nchai_1.expect(numberValue).deep.eq(16776960);",
            "err": {},
            "isRoot": false,
            "uuid": "b1d7ef4e-8b4f-4433-9f6b-7111ca1bb15c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
            "fullTitle": "Color Test new Color(0, 0, 0, \"1ac3ef\") should give the color number : 1754095",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var color = new color_1.Color(0, 0, 0, \"1ac3ef\");\nchai_1.expect(__assign({}, color)).deep.eq({\n    blue: 239,\n    color: \"1AC3EF\",\n    green: 195,\n    red: 26,\n});",
            "err": {},
            "isRoot": false,
            "uuid": "94ccdd9d-19c2-4696-b4e2-d3a3d0e6846f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1ce7a502-f15f-46e2-b33e-ca1b7baadf82",
          "b1d7ef4e-8b4f-4433-9f6b-7111ca1bb15c",
          "94ccdd9d-19c2-4696-b4e2-d3a3d0e6846f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 3,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "2b897396-4ca1-4aa5-85ba-3c7a99d16a6b",
        "title": "Util Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/util.test.ts",
        "file": "/test/util.test.ts",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "parseDeviceInfo() should successful parse valid message",
            "fullTitle": "Util Test parseDeviceInfo() should successful parse valid message",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var message = fs.readFileSync(path.join(__dirname, \"./data/valid-message.txt\"), \"utf8\");\nvar device = utils_1.Utils.parseDeviceInfo(message);\nvar outputExpected = require(\"./data/valid-device.json\");\nchai_1.expect(device).not.eq(null);\nchai_1.expect(device).deep.eq(outputExpected);",
            "err": {},
            "isRoot": false,
            "uuid": "5e739656-385e-4b46-b389-39be595f15cb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "getListIpAddress should get the arround ip address first",
            "fullTitle": "Util Test getListIpAddress should get the arround ip address first",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var ip = \"192.168.1.5\";\nvar output = utils_1.Utils.getListIpAddress(ip, 1, 10);\nchai_1.expect(output).to.deep.eq([\n    \"192.168.1.4\",\n    \"192.168.1.6\",\n    \"192.168.1.3\",\n    \"192.168.1.7\",\n    \"192.168.1.2\",\n    \"192.168.1.8\",\n    \"192.168.1.1\",\n    \"192.168.1.9\",\n    \"192.168.1.10\",\n]);",
            "err": {},
            "isRoot": false,
            "uuid": "cc5e02bf-0b94-4722-b6d8-720738295d8b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "716399f4-5564-49bb-947a-c533e96db139",
            "title": "hexToNumber() test",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/util.test.ts",
            "file": "/test/util.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "numberToHex(1) should equal to 1",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1) should equal to 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "8556f99a-3aa1-4235-a753-8aa98026452e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(10) should equal to 16",
                "fullTitle": "Util Test hexToNumber() test numberToHex(10) should equal to 16",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "3f4edbb5-5ed9-4b06-9d84-68890bdcd7e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(14) should equal to 20",
                "fullTitle": "Util Test hexToNumber() test numberToHex(14) should equal to 20",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "8b7fbee9-f79c-4090-bc2e-873a62273435",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(44) should equal to 68",
                "fullTitle": "Util Test hexToNumber() test numberToHex(44) should equal to 68",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "f398f475-0ee4-4bed-9734-efe39e1ebeb7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(A) should equal to 10",
                "fullTitle": "Util Test hexToNumber() test numberToHex(A) should equal to 10",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "37e57bb5-fbc5-4c02-b6d1-c6cf24f4d631",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(F) should equal to 15",
                "fullTitle": "Util Test hexToNumber() test numberToHex(F) should equal to 15",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "06bbf18a-2f9e-46c4-b422-cd25609cfa92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(1A) should equal to 26",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1A) should equal to 26",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "b093b418-bf72-4f3f-883e-bfce0216f640",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(FF) should equal to 255",
                "fullTitle": "Util Test hexToNumber() test numberToHex(FF) should equal to 255",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "fe8b4b41-3e07-4293-93da-35b391ec248b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(AB) should equal to 171",
                "fullTitle": "Util Test hexToNumber() test numberToHex(AB) should equal to 171",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "3786bc5d-fdad-4a68-9fb9-f1c01c165dc7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(A123BE) should equal to 10560446",
                "fullTitle": "Util Test hexToNumber() test numberToHex(A123BE) should equal to 10560446",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "7e06ecee-3934-4fbe-abfc-d27f922f0b15",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                "fullTitle": "Util Test hexToNumber() test numberToHex(1234567890ABCDEF) should equal to 1311768467294899700",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "ce62f9e3-fe35-49ba-b625-25dc0255fdc0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(ABCFED) should equal to 11259885",
                "fullTitle": "Util Test hexToNumber() test numberToHex(ABCFED) should equal to 11259885",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "f57c9b2f-e4e8-4ed8-8dc3-41d2d4bc156c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "numberToHex(abccde) should equal to 11259102",
                "fullTitle": "Util Test hexToNumber() test numberToHex(abccde) should equal to 11259102",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var v = utils_1.Utils.hexToNumber(key);\nchai_1.expect(v).to.eq(json[key]);",
                "err": {},
                "isRoot": false,
                "uuid": "19f529b7-ba46-4b81-9bf7-b839c85b58b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8556f99a-3aa1-4235-a753-8aa98026452e",
              "3f4edbb5-5ed9-4b06-9d84-68890bdcd7e3",
              "8b7fbee9-f79c-4090-bc2e-873a62273435",
              "f398f475-0ee4-4bed-9734-efe39e1ebeb7",
              "37e57bb5-fbc5-4c02-b6d1-c6cf24f4d631",
              "06bbf18a-2f9e-46c4-b422-cd25609cfa92",
              "b093b418-bf72-4f3f-883e-bfce0216f640",
              "fe8b4b41-3e07-4293-93da-35b391ec248b",
              "3786bc5d-fdad-4a68-9fb9-f1c01c165dc7",
              "7e06ecee-3934-4fbe-abfc-d27f922f0b15",
              "ce62f9e3-fe35-49ba-b625-25dc0255fdc0",
              "f57c9b2f-e4e8-4ed8-8dc3-41d2d4bc156c",
              "19f529b7-ba46-4b81-9bf7-b839c85b58b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [
          "5e739656-385e-4b46-b389-39be595f15cb",
          "cc5e02bf-0b94-4722-b6d8-720738295d8b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "c4334dd4-0d26-44fb-957c-af95f4fed51b",
        "title": "Yeelight Class Test",
        "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
        "file": "/test/yeelight.test.ts",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Yeelight Class Test \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var me = TestUtils;\nserver = net_1.createServer(function (s) {\n    socket = s;\n    if (data != null) {\n        socket.write(JSON.stringify(data));\n        socket.once(\"data\", function (incomming) {\n            validateFunc(JSON.parse(incomming.toString()));\n        });\n    }\n    // socket.pipe(socket);\n});\nserver.on(\"connection\", function (s) { return socket = s; });\nconsole.log(\"this.port\", me.port);\nserver.listen(me.port, \"127.0.0.1\", done);\n//done();",
            "err": {},
            "isRoot": false,
            "uuid": "d6bb8c93-381a-4a04-a8ac-2d2582f428a4",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Yeelight Class Test \"after each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// TestUtils.port++;\nif (socket) {\n    socket.removeAllListeners();\n    socket.end();\n    socket.destroy();\n}\nif (server) {\n    server.removeAllListeners();\n    server.close(done);\n}\nelse {\n    done();\n}",
            "err": {},
            "isRoot": false,
            "uuid": "10e587f4-25ae-4d1e-8882-d209264a14e8",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "connect() should success",
            "fullTitle": "Yeelight Class Test connect() should success",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return __awaiter(_this, void 0, void 0, function () {\n        var yeelight, y;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    yeelight = new yeelight_1.Yeelight(options);\n                    return [4 /*yield*/, yeelight.connect()];\n                case 1:\n                    y = _a.sent();\n                    chai_1.expect(y).not.eq(null);\n                    chai_1.expect(y.connected).to.eq(true);\n                    y.disconnect();\n                    return [2 /*return*/];\n            }\n        });\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "6c311fa9-62b9-4c26-954a-e5ff19c39a68",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "f64b5be4-d53c-474e-aefe-e3cc0e3470da",
            "title": "setName() tests",
            "fullFile": "/home/travis/build/samuraitruong/yeelight/test/yeelight.test.ts",
            "file": "/test/yeelight.test.ts",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "setName() should work when send valid message",
                "fullTitle": "Yeelight Class Test setName() tests setName() should work when send valid message",
                "timedOut": false,
                "duration": 2007,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options.lightPort = test_util_1.TestUtils.port;\n                        yeelight = new yeelight_1.Yeelight(options);\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(result).to.not.eq(null);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "80893e54-145d-4a7c-aebe-759b75be1064",
                "isHook": false,
                "skipped": true
              },
              {
                "title": "setName() should fire commandSuccess, set_name, set_name_sent event",
                "fullTitle": "Yeelight Class Test setName() tests setName() should fire commandSuccess, set_name, set_name_sent event",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy1, spy2, spy3, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"unit_test\"]),\n                            result: { id: 1, result: [\"ok\"] },\n                            success: true,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandSuccess\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, result: [\"ok\"] }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"unit_test\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"unit_test\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(__assign({}, result)).to.deep.equal(expectData);\n                        sinon_1.assert.calledWith(spy1, expectData);\n                        sinon_1.assert.calledWith(spy2, expectData);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "0678deda-b82f-499b-a8bb-30a22bcb7619",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                "fullTitle": "Yeelight Class Test setName() tests setName() should fire error when send invalid name, should fire set_name, commandError, set_name_sent events",
                "timedOut": false,
                "duration": 5,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData1, spy1, spy2, spy3, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        options.lightPort = test_util_1.TestUtils.port;\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData1 = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"this is invalid name\"]),\n                            result: { id: 1, error: { code: -1, message: \"General error\" } },\n                            success: false,\n                        };\n                        spy1 = sinon_1.spy();\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"set_name\", spy1);\n                        y.once(\"commandError\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket({ id: 1, error: { code: -1, message: \"General error\" } }, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"this is invalid name\"],\n                            });\n                        });\n                        return [4 /*yield*/, y.setName(\"this is invalid name\")];\n                    case 2:\n                        result = _a.sent();\n                        chai_1.expect(__assign({}, result)).to.deep.equal(expectData1);\n                        sinon_1.assert.calledWith(spy1, expectData1);\n                        sinon_1.assert.calledWith(spy2, expectData1);\n                        sinon_1.assert.calledWith(spy3, expectData1.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "480611fa-436a-4d70-9583-3b9613b6f777",
                "isHook": false,
                "skipped": true
              },
              {
                "title": "setName() should reject promise, raise commandTimedout event when socket not response",
                "fullTitle": "Yeelight Class Test setName() tests setName() should reject promise, raise commandTimedout event when socket not response",
                "timedOut": false,
                "duration": 5,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "return __awaiter(_this, void 0, void 0, function () {\n            var yeelight, y, expectData, spy2, spy3, result, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        yeelight = new yeelight_1.Yeelight(options);\n                        options.lightPort = test_util_1.TestUtils.port;\n                        console.log(\"port\", options);\n                        return [4 /*yield*/, yeelight.connect()];\n                    case 1:\n                        y = _a.sent();\n                        expectData = {\n                            action: \"set_name\",\n                            command: new models_1.Command(1, models_1.CommandType.SET_NAME, [\"mybulb\"]),\n                            success: false,\n                        };\n                        spy2 = sinon_1.spy();\n                        spy3 = sinon_1.spy();\n                        y.once(\"commandTimedout\", spy2);\n                        y.once(\"set_name_sent\", spy3);\n                        test_util_1.TestUtils.mockSocket(null, function (x) {\n                            chai_1.expect(x).to.deep.eq({\n                                id: 1, method: \"set_name\", params: [\"mybulb\"],\n                            });\n                        });\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, y.setName(\"mybulb\")];\n                    case 3:\n                        result = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 5:\n                        sinon_1.assert.calledWith(spy2, expectData.command);\n                        sinon_1.assert.calledWith(spy3, expectData.command);\n                        yeelight.disconnect();\n                        return [2 /*return*/];\n                }\n            });\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "24d5f0a9-a607-4af7-85a7-789c696da67f",
                "isHook": false,
                "skipped": true
              }
            ],
            "suites": [],
            "passes": [
              "0678deda-b82f-499b-a8bb-30a22bcb7619"
            ],
            "failures": [],
            "pending": [],
            "skipped": [
              "80893e54-145d-4a7c-aebe-759b75be1064",
              "480611fa-436a-4d70-9583-3b9613b6f777",
              "24d5f0a9-a607-4af7-85a7-789c696da67f"
            ],
            "duration": 2022,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [
          "6c311fa9-62b9-4c26-954a-e5ff19c39a68"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 4,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2018
}